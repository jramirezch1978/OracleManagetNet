@page "/"
@using OracleDBManager.Core.Interfaces
@using OracleDBManager.Core.Models
@using OracleDBManager.Infrastructure.Configuration
@inject ILockService LockService
@inject NavigationManager Navigation
@inject OracleConfiguration OracleConfig
@inject IConnectionLogService ConnectionLogService
@inject IHttpContextAccessor HttpContextAccessor
@rendermode InteractiveServer

<PageTitle>Inicio - Oracle Database Manager</PageTitle>

<div class="page-header mb-4">
    <h2><i class="fas fa-dashboard"></i> Panel de Control</h2>
</div>

<div class="row">
    <div class="col-md-6 col-lg-3 mb-4">
        <div class="card">
            <div class="card-body text-center">
                <i class="fas fa-lock fa-3x text-warning mb-3"></i>
                <h5 class="card-title">Bloqueos Activos</h5>
                <h2 class="text-primary">@activeLocks</h2>
                <a href="/locks" class="btn btn-sm btn-primary mt-2">Ver Bloqueos</a>
            </div>
        </div>
    </div>
    
    <div class="col-md-6 col-lg-3 mb-4">
        <div class="card">
            <div class="card-body text-center">
                <i class="fas fa-ban fa-3x text-danger mb-3"></i>
                <h5 class="card-title">Sesiones Bloqueadas</h5>
                <h2 class="text-danger">@blockedSessions</h2>
                <a href="/locks" class="btn btn-sm btn-danger mt-2">Ver Detalles</a>
            </div>
        </div>
    </div>
    
    <div class="col-md-6 col-lg-3 mb-4">
        <div class="card">
            <div class="card-body text-center">
                <i class="fas fa-database fa-3x text-success mb-3"></i>
                <h5 class="card-title">Estado Base de Datos</h5>
                <h2 class="text-success">@(isConnected ? "Conectado" : "Desconectado")</h2>
                <button class="btn btn-sm btn-success mt-2" @onclick="ShowConnectionModal">Probar Conexión</button>
            </div>
        </div>
    </div>
    
    <div class="col-md-6 col-lg-3 mb-4">
        <div class="card">
            <div class="card-body text-center">
                <i class="fas fa-server fa-3x text-info mb-3"></i>
                <h5 class="card-title">Servidor Oracle</h5>
                <p class="text-muted">192.168.0.159:1521</p>
                <p class="text-muted">HADES</p>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-info-circle"></i> Información del Sistema</h5>
            </div>
            <div class="card-body">
                <p>Bienvenido a Oracle Database Manager, una herramienta similar a Oracle Enterprise Manager para gestionar y monitorear tu base de datos Oracle.</p>
                <h6>Características principales:</h6>
                <ul>
                    <li>Gestión de bloqueos de base de datos</li>
                    <li>Monitoreo de sesiones activas</li>
                    <li>Terminación de sesiones problemáticas</li>
                    <li>Visualización en tiempo real</li>
                    <li>Integración con Active Directory</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@* Modal de Configuración de Conexión *@
@if (showConnectionModal)
{
    <div class="oracle-modal">
        <div class="oracle-modal-content" style="max-width: 600px;">
            <div class="oracle-modal-header">
                <i class="fas fa-database"></i> Configuración de Conexión Oracle
            </div>
            <div class="oracle-modal-body">
                <div class="mb-3">
                    <label class="form-label">Host:</label>
                    <input type="text" class="form-control" @bind="connectionModel.Host" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Puerto:</label>
                    <input type="text" class="form-control" @bind="connectionModel.Port" />
                </div>
                <div class="mb-3">
                    <label class="form-label">@(connectionModel.UseSID ? "SID:" : "Nombre del Servicio:")</label>
                    <input type="text" class="form-control" @bind="connectionModel.ServiceName" />
                </div>
                <div class="mb-3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="connectionModel.UseSID" id="useSID">
                        <label class="form-check-label" for="useSID">
                            Usar SID en lugar de Service Name
                        </label>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label">Usuario:</label>
                    <input type="text" class="form-control" @bind="connectionModel.UserId" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Contraseña:</label>
                    <input type="password" class="form-control" @bind="connectionModel.Password" />
                </div>
                
                @if (isTestingConnection)
                {
                    <div class="text-center">
                        <div class="oracle-spinner"></div>
                        <p>Probando conexión...</p>
                    </div>
                }
            </div>
            <div class="oracle-modal-footer">
                <button class="oracle-button" @onclick="CloseConnectionModal" disabled="@isTestingConnection">Cancelar</button>
                <button class="oracle-button oracle-button-primary" @onclick="TestConnectionWithParams" disabled="@isTestingConnection">
                    <i class="fas fa-plug"></i> Conectar
                </button>
            </div>
        </div>
    </div>
}

@* Modal de Resultado de Conexión *@
@if (showResultModal)
{
    <div class="oracle-modal" style="z-index: 1100;">
        <div class="oracle-modal-content" style="max-width: 400px;">
            <div class="oracle-modal-header">
                @if (connectionSuccess)
                {
                    <i class="fas fa-check-circle text-success"></i>
                    <span class="text-success"> Conexión Exitosa</span>
                }
                else
                {
                    <i class="fas fa-times-circle text-danger"></i>
                    <span class="text-danger"> Error de Conexión</span>
                }
            </div>
            <div class="oracle-modal-body text-center">
                @if (connectionSuccess)
                {
                    <i class="fas fa-check-circle fa-5x text-success mb-3"></i>
                    <h5>¡Conexión establecida satisfactoriamente!</h5>
                    <p>La conexión a la base de datos Oracle se ha realizado correctamente.</p>
                }
                else
                {
                    <i class="fas fa-times-circle fa-5x text-danger mb-3"></i>
                    <h5>No se pudo establecer la conexión</h5>
                    <div class="alert alert-danger text-start mt-3">
                        <strong>Error de conexión:</strong><br />
                        <span style="white-space: pre-line">@connectionErrorMessage</span>
                    </div>
                    <div class="text-muted small mt-2">
                        <i class="fas fa-info-circle"></i> Parámetros utilizados:<br />
                        Servidor: @connectionModel.Host:@connectionModel.Port<br />
                        Servicio: @connectionModel.ServiceName<br />
                        Usuario: @connectionModel.UserId
                    </div>
                }
            </div>
            <div class="oracle-modal-footer">
                <button class="oracle-button" @onclick="CloseResultModal">Aceptar</button>
            </div>
        </div>
    </div>
}

@code {
    private int activeLocks = 0;
    private int blockedSessions = 0;
    private bool isConnected = false;
    
    // Estados para los modales
    private bool showConnectionModal = false;
    private bool showResultModal = false;
    private bool isTestingConnection = false;
    private bool connectionSuccess = false;
    private string? connectionErrorMessage;
    
    // Modelo para los datos de conexión
    private ConnectionTestModel connectionModel = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
        LoadConnectionSettings();
    }

    private void LoadConnectionSettings()
    {
        // Cargar valores desde la configuración
        if (!string.IsNullOrEmpty(OracleConfig.DataSource))
        {
            // Primero intentar extraer con SERVICE_NAME
            var matchServiceName = System.Text.RegularExpressions.Regex.Match(
                OracleConfig.DataSource, 
                @"HOST=([^)]+)\).*PORT=(\d+)\).*SERVICE_NAME=([^)]+)\)"
            );
            
            if (matchServiceName.Success)
            {
                connectionModel.Host = matchServiceName.Groups[1].Value;
                connectionModel.Port = matchServiceName.Groups[2].Value;
                connectionModel.ServiceName = matchServiceName.Groups[3].Value;
                connectionModel.UseSID = false;
            }
            else
            {
                // Si no, intentar con SID
                var matchSID = System.Text.RegularExpressions.Regex.Match(
                    OracleConfig.DataSource, 
                    @"HOST=([^)]+)\).*PORT=(\d+)\).*SID=([^)]+)\)"
                );
                
                if (matchSID.Success)
                {
                    connectionModel.Host = matchSID.Groups[1].Value;
                    connectionModel.Port = matchSID.Groups[2].Value;
                    connectionModel.ServiceName = matchSID.Groups[3].Value;
                    connectionModel.UseSID = true;
                }
            }
        }
        
        connectionModel.UserId = OracleConfig.UserId;
        connectionModel.Password = OracleConfig.Password;
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Probar conexión
            isConnected = await LockService.TestDatabaseConnectionAsync();
            
            if (isConnected)
            {
                // Obtener datos de bloqueos
                var locks = await LockService.GetAllLocksAsync();
                activeLocks = locks.Count;
                blockedSessions = locks.Count(l => l.IsBlocked);
            }
        }
        catch
        {
            isConnected = false;
        }
    }

    private void ShowConnectionModal()
    {
        showConnectionModal = true;
        LoadConnectionSettings(); // Recargar valores actuales
    }

    private void CloseConnectionModal()
    {
        showConnectionModal = false;
        isTestingConnection = false;
    }

    private async Task TestConnectionWithParams()
    {
        // Obtener información detallada del cliente
        var clientInfo = await ClientInfo.GetClientInfoAsync(HttpContextAccessor.HttpContext);
        
        // Formatear información del cliente para el log
        var clientInfoStr = $"Usuario: {clientInfo.UserName}, " +
                           $"Máquina: {clientInfo.MachineName}, " +
                           $"IP Local: {clientInfo.LocalIpV4}, " +
                           $"IP Pública: {clientInfo.PublicIp}, " +
                           $"MAC: {clientInfo.MacAddress}, " +
                           $"Interfaz: {clientInfo.NetworkInterfaceName}";
        
        try
        {
            isTestingConnection = true;
            StateHasChanged();
            
            // Registrar intento de conexión
            await ConnectionLogService.LogConnectionAttemptAsync(connectionModel, clientInfo.UserName, clientInfoStr);
            
            // Simular delay para mostrar el spinner
            await Task.Delay(1000);
            
            // Intentar conexión con los parámetros del formulario
            try
            {
                connectionSuccess = await LockService.TestDatabaseConnectionAsync();
                
                if (connectionSuccess)
                {
                    // Registrar conexión exitosa
                    await ConnectionLogService.LogConnectionSuccessAsync(connectionModel, clientInfo.UserName, clientInfoStr);
                }
                else
                {
                    connectionErrorMessage = "No se pudo conectar a la base de datos. Verifique los parámetros de conexión.";
                    var genericException = new Exception(connectionErrorMessage);
                    await ConnectionLogService.LogConnectionErrorAsync(connectionModel, clientInfo.UserName, clientInfoStr, genericException);
                }
            }
            catch (Oracle.ManagedDataAccess.Client.OracleException oex)
            {
                connectionSuccess = false;
                
                // Registrar error detallado
                await ConnectionLogService.LogConnectionErrorAsync(connectionModel, clientInfo.UserName, clientInfoStr, oex);
                
                // Mensajes específicos según el error Oracle
                if (oex.Message.Contains("ORA-12541"))
                {
                    connectionErrorMessage = "ORA-12541: TNS: no hay ningún listener.\n" +
                        $"No se puede conectar al servidor {connectionModel.Host}:{connectionModel.Port}.\n" +
                        "Verifique que el servicio Oracle esté ejecutándose.";
                }
                else if (oex.Message.Contains("ORA-12514"))
                {
                    connectionErrorMessage = "ORA-12514: TNS: el listener no conoce el servicio solicitado.\n" +
                        $"El servicio '{connectionModel.ServiceName}' no está disponible.";
                }
                else if (oex.Message.Contains("ORA-01017"))
                {
                    connectionErrorMessage = "ORA-01017: Usuario/contraseña inválidos.\n" +
                        "Verifique las credenciales de acceso.";
                }
                else if (oex.Message.Contains("ORA-28000"))
                {
                    connectionErrorMessage = "ORA-28000: La cuenta está bloqueada.\n" +
                        $"El usuario '{connectionModel.UserId}' está bloqueado.";
                }
                else
                {
                    connectionErrorMessage = $"Error Oracle: {oex.Message}";
                }
            }
        }
        catch (Exception ex)
        {
            connectionSuccess = false;
            connectionErrorMessage = $"Error inesperado: {ex.Message}";
            
            // Registrar error inesperado
            await ConnectionLogService.LogConnectionErrorAsync(connectionModel, clientInfo.UserName, clientInfoStr, ex);
        }
        finally
        {
            isTestingConnection = false;
            showResultModal = true;
            StateHasChanged();
        }
    }

    private async Task CloseResultModal()
    {
        showResultModal = false;
        
        if (connectionSuccess)
        {
            showConnectionModal = false;
            await LoadDashboardData(); // Recargar datos si la conexión fue exitosa
        }
    }
}
